// Generated by gencpp from file action_example/CountdownFeedback.msg
// DO NOT EDIT!


#ifndef ACTION_EXAMPLE_MESSAGE_COUNTDOWNFEEDBACK_H
#define ACTION_EXAMPLE_MESSAGE_COUNTDOWNFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action_example
{
template <class ContainerAllocator>
struct CountdownFeedback_
{
  typedef CountdownFeedback_<ContainerAllocator> Type;

  CountdownFeedback_()
    : count_percent(0.0)
    , count_current(0)  {
    }
  CountdownFeedback_(const ContainerAllocator& _alloc)
    : count_percent(0.0)
    , count_current(0)  {
  (void)_alloc;
    }



   typedef float _count_percent_type;
  _count_percent_type count_percent;

   typedef int32_t _count_current_type;
  _count_current_type count_current;





  typedef boost::shared_ptr< ::action_example::CountdownFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_example::CountdownFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct CountdownFeedback_

typedef ::action_example::CountdownFeedback_<std::allocator<void> > CountdownFeedback;

typedef boost::shared_ptr< ::action_example::CountdownFeedback > CountdownFeedbackPtr;
typedef boost::shared_ptr< ::action_example::CountdownFeedback const> CountdownFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_example::CountdownFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_example::CountdownFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_example::CountdownFeedback_<ContainerAllocator1> & lhs, const ::action_example::CountdownFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.count_percent == rhs.count_percent &&
    lhs.count_current == rhs.count_current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_example::CountdownFeedback_<ContainerAllocator1> & lhs, const ::action_example::CountdownFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_example

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::action_example::CountdownFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_example::CountdownFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_example::CountdownFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_example::CountdownFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_example::CountdownFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_example::CountdownFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_example::CountdownFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "939cc9132efdc6d2171ee36be1d52aab";
  }

  static const char* value(const ::action_example::CountdownFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x939cc9132efdc6d2ULL;
  static const uint64_t static_value2 = 0x171ee36be1d52aabULL;
};

template<class ContainerAllocator>
struct DataType< ::action_example::CountdownFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_example/CountdownFeedback";
  }

  static const char* value(const ::action_example::CountdownFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_example::CountdownFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback define\n"
"float32 count_percent\n"
"int32   count_current\n"
"\n"
"\n"
;
  }

  static const char* value(const ::action_example::CountdownFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_example::CountdownFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.count_percent);
      stream.next(m.count_current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CountdownFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_example::CountdownFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_example::CountdownFeedback_<ContainerAllocator>& v)
  {
    s << indent << "count_percent: ";
    Printer<float>::stream(s, indent + "  ", v.count_percent);
    s << indent << "count_current: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count_current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_EXAMPLE_MESSAGE_COUNTDOWNFEEDBACK_H
