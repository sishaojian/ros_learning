// Generated by gencpp from file action_example/CountdownGoal.msg
// DO NOT EDIT!


#ifndef ACTION_EXAMPLE_MESSAGE_COUNTDOWNGOAL_H
#define ACTION_EXAMPLE_MESSAGE_COUNTDOWNGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action_example
{
template <class ContainerAllocator>
struct CountdownGoal_
{
  typedef CountdownGoal_<ContainerAllocator> Type;

  CountdownGoal_()
    : target_number(0)
    , target_step(0)  {
    }
  CountdownGoal_(const ContainerAllocator& _alloc)
    : target_number(0)
    , target_step(0)  {
  (void)_alloc;
    }



   typedef int32_t _target_number_type;
  _target_number_type target_number;

   typedef int32_t _target_step_type;
  _target_step_type target_step;





  typedef boost::shared_ptr< ::action_example::CountdownGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_example::CountdownGoal_<ContainerAllocator> const> ConstPtr;

}; // struct CountdownGoal_

typedef ::action_example::CountdownGoal_<std::allocator<void> > CountdownGoal;

typedef boost::shared_ptr< ::action_example::CountdownGoal > CountdownGoalPtr;
typedef boost::shared_ptr< ::action_example::CountdownGoal const> CountdownGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_example::CountdownGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_example::CountdownGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_example::CountdownGoal_<ContainerAllocator1> & lhs, const ::action_example::CountdownGoal_<ContainerAllocator2> & rhs)
{
  return lhs.target_number == rhs.target_number &&
    lhs.target_step == rhs.target_step;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_example::CountdownGoal_<ContainerAllocator1> & lhs, const ::action_example::CountdownGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_example

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::action_example::CountdownGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_example::CountdownGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_example::CountdownGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_example::CountdownGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_example::CountdownGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_example::CountdownGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_example::CountdownGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f70b62431a53ca0ff987c03fd2dbcdf9";
  }

  static const char* value(const ::action_example::CountdownGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf70b62431a53ca0fULL;
  static const uint64_t static_value2 = 0xf987c03fd2dbcdf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_example::CountdownGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_example/CountdownGoal";
  }

  static const char* value(const ::action_example::CountdownGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_example::CountdownGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal define\n"
"int32 target_number\n"
"int32 target_step\n"
;
  }

  static const char* value(const ::action_example::CountdownGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_example::CountdownGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_number);
      stream.next(m.target_step);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CountdownGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_example::CountdownGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_example::CountdownGoal_<ContainerAllocator>& v)
  {
    s << indent << "target_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_number);
    s << indent << "target_step: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_step);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_EXAMPLE_MESSAGE_COUNTDOWNGOAL_H
